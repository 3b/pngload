(in-package :mediabox-png)

(defclass chunk ()
  ((length :reader chunk-length)
   (type :reader chunk-type)
   (data :reader chunk-data)
   (crc :reader chunk-crc)))

(defmethod print-object ((object chunk) stream)
  (print-unreadable-object (object stream :type t)
    (format stream "~S" (chunk-type->name object))))

(defun chunk-type->name (chunk)
  (case (chunk-type chunk)
    (#x49484452 :ihdr)
    (#x504c5445 :plte)
    (#x49444154 :idat)
    (#x49454e44 :iend)
    (#x6348524d :chrm)
    (#x67414d41 :gama)
    (#x69434350 :iccp)
    (#x73424954 :sbit)
    (#x73524742 :srgb)
    (#x624b4744 :bkgd)
    (#x68495354 :hist)
    (#x74524e53 :trns)
    (#x70485973 :phys)
    (#x73504c54 :splt)
    (#x74494d45 :time)
    (#x69545874 :itxt)
    (#x74455874 :text)
    (#x7a545874 :ztxt)
    (otherwise :unknown-chunk)))

(defun chunk-name->type (name)
  (ecase name
    (:ihdr #x49484452)
    (:plte #x504c5445)
    (:idat #x49444154)
    (:iend #x49454e44)
    (:chrm #x6348524d)
    (:gama #x67414d41)
    (:iccp #x69434350)
    (:sbit #x73424954)
    (:srgb #x73524742)
    (:bkgd #x624b4744)
    (:hist #x68495354)
    (:trns #x74524e53)
    (:phys #x70485973)
    (:splt #x73504c54)
    (:time #x74494d45)
    (:itxt #x69545874)
    (:text #x74455874)
    (:ztxt #x7a545874)))

(defun colour-type->name (chunk)
  (ecase (ihdr-colour-type (chunk-data chunk))
    (0 :greyscale)
    (2 :truecolour)
    (3 :indexed-colour)
    (4 :greyscale-alpha)
    (6 :truecolour-alpha)))

(defun find-chunk (file chunk-name)
  (find-if
   (lambda (x) (eq x (chunk-name->type chunk-name)))
   (chunks (datastream file))
   :key #'chunk-type))

(defmethod parse (file (node (eql :chunk)) &key)
  (let ((@ (buffer file))
        (chunk (make-instance 'chunk)))
    (with-slots (length type data crc) chunk
      (setf length (readu32-be @)
            type (readu32-be @)
            data (parse file (chunk-type->name chunk) :length length)
            crc (readu32-be @)))
    chunk))
