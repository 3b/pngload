name: CI
on:
  push:
#    branches: [ master, tmp ]
  pull_request:
    branches: [ master ]
jobs:
  test:
    name: ${{ matrix.lisp }} on ${{ matrix.os }}
    strategy:
      matrix:
        # sbcl32 and clisp32 don't work, clasp won't build on CI servers
        lisp: [sbcl-bin,sbcl,ccl-bin/1.12,ccl32,ecl,clisp,allegro,cmucl,abcl]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          # some implementations don't install/build properly on windows
            - os: windows-latest
              lisp: allegro
            - os: windows-latest
              lisp: cmucl
            - os: windows-latest
              lisp: abcl
            - os: windows-latest
              lisp: ecl
            - os: windows-latest
              lisp: clisp
          # CFFI requires CLISP compiled with dynamic FFI support.
            - os: macos-latest
              lisp: clisp
          # sbcl-bin is too old on macos
            - os: macos-latest
              lisp: sbcl-bin
          # skip 32bit lisps on osx
            - os: macos-latest
              lisp: sbcl32
            - os: macos-latest
              lisp: ccl32
            - os: macos-latest
              lisp: clisp32
            - os: macos-latest
              lisp: allegro
            - os: macos-latest
              lisp: cmucl
          # clisp doesn't build with current readline, do disable on linux too for now
            - os: ubuntu-latest
              lisp: clisp
          # roswell can't install ccl 1.12.1 on windows, so skip ccl32 there
            - os: windows-latest
              lisp: ccl32
      fail-fast: false

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # specify default shell explicitly to get msys instead of git-bash on windows
        shell: ${{ fromJSON('[ "bash", "msys2 {0}" ]') [ matrix.os == 'windows-latest' ] }}

    steps:
    - uses: msys2/setup-msys2@v2
      if: matrix.os == 'windows-latest'
      with:
        path-type: inherit
        msystem: MINGW64
        # set these to true if we want to install things from pacman
        release: true
        update: true
        # list all packages we want installed if using release&update true
        install: 'git base-devel unzip mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-zlib'

    - name: windows specific settings
      if: matrix.os == 'windows-latest'
      # run with pwsh so we can see its HOME, though probably could use $USERPROFILE instead
      shell: pwsh
      run: |
        git config --global core.autocrlf false
        echo "MSYSCON=defterm" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "$HOME/.roswell/bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        echo "$HOME/.roswell/lisp/quicklisp/bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        echo "$HOME/.roswell/bin"
        echo "ENV $Env:GITHUB_ENV"
        echo "PATH $Env:GITHUB_PATH"
        cat $Env:GITHUB_ENV
        cat $Env:GITHUB_PATH

    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        path: pngload

    # check out extra repos if not in QL, or version in ql is too old
    - run: mkdir -p ~/lisp/

    - name: ci-utils fork
      uses: actions/checkout@v2
      with:
        repository: 3b/ci-utils
        ref: test2
        path: ~/lisp/ci-utils

    - name: skippy fork
      uses: actions/checkout@v2
      with:
        repository: 3b/skippy
        path: ~/lisp/skippy

    - name: older opticl
      uses: actions/checkout@v2
      with:
        #repository: slyrus/opticl
        #ref: 0eba652a06a6c022f0283c6db2833dd23cb62190
        repository: tdrhq/opticl
        ref: a33e3411d28ebff4b29a59a3619884c0f54ff586
        path: ~/lisp/opticl

    - name: cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-${{ hashFiles('**/*.asd') }}
        restore-keys: |
          ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-
          ${{ runner.os }}-dot-roswell-

    - name: install roswell
      # continue-on-error: true
      # always run install, since it does some global installs and setup that isn't cached
      env:
       LISP: ${{ matrix.lisp }}
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh -x

    - name: print version/configuration info
      continue-on-error: true
      run: |
        echo "PATH=$PATH"
        echo "MSYSCON=$MSYSCON"
        echo "LOCALAPPDATA=$LOCALAPPDATA"
        ls $LOCALAPPDATA/config/common-lisp/source-registry.conf.d || true
        echo "HOME=$HOME"
        ls $HOME/.config/common-lisp/source-registry.conf.d  || true
        echo localappdata conf
        cat $LOCALAPPDATA/config/common-lisp/source-registry.conf.d/ci.conf  || true
        echo home conf
        cat $HOME/.config/common-lisp/source-registry.conf.d/ci.conf  || true
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
        echo `echo $GITHUB_WORKSPACE | sed -e 's/\\\\/\//g'`
        ros -e '(format t "~a:~a on ~a~%...~%~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
        ros -e '(format t " fixnum bits:~a~%" (integer-length most-positive-fixnum))'
        ros -e "(ql:quickload 'trivial-features)" -e '(format t "features = ~s~%" *features*)'
        which gcc
        gcc --version

    - name: update ql dist if we have one cached
      run: |
        ros -e "(ql:update-all-dists :prompt nil)"

    - name: install ci-utils
      run: |
        ros install ci-utils
        echo "$HOME/.roswell/bin" >> $GITHUB_PATH
        echo "$HOME/.roswell/bin"

    - name: clear fasl cache
      run: |
        rm -rf ~/.cache/common-lisp/
        mkdir -p ~/.cache/common-lisp/
        
    - name: load code from clean fasl cache and run tests
      run: |
        run-test-forms -l pngload.test '(pngload.test:run-tests-for-ci)'

    - name: load code from fasls and run tests
      run: |
        run-test-forms -l pngload.test '(pngload.test:run-tests-for-ci)'

    - name: test read times
      run: |
        curl http://3bb.cc/tmp/fft.png -o fft.png
        run-test-forms -l pngload.test '(or (pngload.test:test-read-times "fft.png" :count 10) t)'
